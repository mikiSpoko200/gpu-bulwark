

## Graphics pipeline

It can be broadly divided into to conceptual halves:

**geometry processing** `->` discretization `->` **pixel processing**

- some parts are programmable 
- some allow limited configuration, but are mostly performed via a predefined process 

---
## Terminology

- shader - a routine which runs on the GPU, that implements programmable stages of the graphics pipeline.
- fixed-function - term commonly used to describe parts of graphics pipeline which are not freely programmable, but rather configurable to a limited degree.

---
## Geometric data

Geometric data is specified using abstract notion of a vertex in a mesh representing
the surface of a 3D object.

---
## Rasterization

Geometric shapes must at some point be converted into discrete set of pixels.

This process of conversion, from continous geometric data
into discrete color samples is called rasterization.

Fixed function stages interpolate vertex data across prmitive's surface.
This collection of interpolated data is called a **fragment**.

---
## Fragment processing

Fragments are subsequently processed by a fragment shader, to obtain color values.
There per pixel lighting computations using interpolated surface normals,
materials are applied using texture mapping, and different post processing effects 
may be applied.

---

# OpenGL API

## Objects

Objects are how OpenGL represents GPU resources.

There are number of objects, but most these matter the most for our purposes:
- buffers
- vertex arrays
- shaders
- programs
- textures

## Objects

Currently used object instance is configured using `glBind*` which sets global bindings withing the context.

Objects may have multiple binding points which correspond to different use cases for the same abstract resource.
For example:
- Vertex Buffer - `GL_ARRAY_BUFFER`, Index Buffer - `GL_ELEMENT_BUFFER`, Shader Storage Buffer - `GL_SHADER_STORAGE_BUFFER`
- Different texture - `GL_TEXTURE_2D`, `GL_TEXTURE_3D`, `GL_TEXTURE_CUBE_MAP`

## Shaders and Program objects

To start, shader source code is to loaded from a files, uploaded to OpenGL, and compiled.
With required minimum of vertex and fragment shaders they can be attached to a program.

## Program

Programs are 


## Buffers

Buffers provide the ability to explicitly allocated memory on the GPU.
This memory can be mapped into clients address space.
Buffer's most basic functionality is to provide geometric data for rendering.

## Vertex Arrays

Due to programmable nature of vertex processing, there is no fixed representation of a vertex.
Meaning and number of vertex data needed for rendering is fully configurable.

Description of the vertex data is provided by the Vertex Array Object.
It specifies format and origin of data for each vertex attribute and associates
it with a numerical index, which links it to the shader inputs defined in glsl 
